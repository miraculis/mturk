import com.sumsubstance.Processing;
import com.sumsubstance.Proxy;
import com.sumsubstance.Tuple;
import cyclops.async.LazyReact;
import cyclops.stream.FutureStream;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collection;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private static Proxy turk = Proxy.sandbox();

    public static void main(String[] args) throws Exception {
        final FutureStream<String> data = LazyReact.sequentialBuilder().fromStream(new BufferedReader(new FileReader(args[0])).lines()).map(String::trim);

        data.forEach((x) ->  {
            final String[] vals = x.split("\\s");
            try {
                turk.submit(Tuple.of(vals[0], vals[1]));
            } catch (Exception e) {
                e.printStackTrace();
            }
        });

        final Path path = Paths.get(args[1]);
        final Processing p = new Processing();
        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(
                () -> turk.available().forEach((x) ->
                {
                    turk.approve(x);
                    p.receive(x, (id, r) -> dump(Tuple.of(id, r), path));
                }),
                0, 5, TimeUnit.SECONDS);
    }

    private static void dump(Tuple<String, Boolean> data, Path path) {
        try(PrintWriter pw = new PrintWriter(Files.newBufferedWriter(path))) {
            System.out.println("printing out " + data);
            pw.println(data);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
