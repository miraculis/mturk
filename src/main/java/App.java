import com.sumsubstance.AutoWire;
import com.sumsubstance.Bean;
import com.sumsubstance.Detector;
import com.sumsubstance.Monitor;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private final static Logger log = LogManager.getLogger(App.class);

    public static void main(String[] args) {
        final Map<Class, Object> beans = new HashMap<>();
        ClassLoader cl = initClassLoader(beans);

        Thread.currentThread().setContextClassLoader(cl);
        ScheduledExecutorService e = Executors.newScheduledThreadPool(2, r -> {
            Thread t = new Thread(r);
            t.setContextClassLoader(cl);
            return t;
        });

        initIoc(beans);

        e.schedule(()-> getBean(Detector.class, beans).scan(), 10, TimeUnit.SECONDS);
        e.schedule(() -> getBean(Monitor.class, beans).scan(), 10, TimeUnit.SECONDS);
    }

    private static void initIoc(Map<Class, Object> beans) {
        beans.values().stream().forEach(x -> {
            Field[] fs = x.getClass().getFields();
            for (int i = 0; i < fs.length; i++) {
                if (fs[i].getAnnotation(AutoWire.class) != null) {
                    try {
                        fs[i].set(x, beans.get(fs[i].getType()));
                    } catch (IllegalAccessException e) {
                        log.error(e);
                    }
                }
            }
        });
    }

    private static<T> T getBean(Class<T> c, Map<Class, Object> beans) {
        return (T)beans.get(c);
    }

    private static ClassLoader initClassLoader(Map<Class, Object> beans) {
        return new ClassLoader() {
            @Override
            public String getName() {
                return super.getName();
            }

            @Override
            public Class<?> loadClass(String name) throws ClassNotFoundException {
                Class<?> x = super.loadClass(name);
                if(Arrays.binarySearch(x.getAnnotations(), Bean.class, (o1, o2) -> {
                    Annotation a1 = (Annotation)o1, a2 = (Annotation)o2;
                    return a1.toString().compareTo(a2.toString());
                }) > -1) {
                    try {
                        beans.put(x, x.getConstructors()[0].newInstance());
                    } catch (Exception e) {
                        log.error(e);
                    }
                }
                return x;
            }
        };
    }
}
